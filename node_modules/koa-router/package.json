{
  "name": "koa-router",
  "description": "Router middleware for koa. Provides RESTful resource routing.",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexmingoia/koa-router.git"
  },
  "author": {
    "name": "Alex Mingoia",
    "email": "talk@alexmingoia.com"
  },
  "version": "1.6.1",
  "keywords": [
    "koa",
    "middleware",
    "router",
    "route"
  ],
  "dependencies": {
    "lingo": "0.0.5",
    "methods": "0.0.1",
    "path-to-regexp": "0.0.2"
  },
  "devDependencies": {
    "koa": "0.0.2",
    "mocha": "1.12.0",
    "should": "1.2.2",
    "supertest": "0.7.1"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha --harmony-generators --recursive"
  },
  "engines": {
    "node": "> 0.11.4"
  },
  "license": "MIT",
  "readme": "# Router middleware for [koa](https://github.com/koajs/koa)\n\n[![Build Status](https://secure.travis-ci.org/alexmingoia/koa-router.png)](http://travis-ci.org/alexmingoia/koa-router) \n[![Dependency Status](https://david-dm.org/alexmingoia/koa-router.png)](http://david-dm.org/alexmingoia/koa-router)\n\n* REST routing using `app.get`, `app.put`, `app.post`, etc.\n* Rails-like resource routing, with nested resources.\n* Named parameters.\n* Multiple route callbacks.\n* Multiple routers.\n\n## Install\n\nkoa-router is available using [npm](https://npmjs.org):\n\n```\nnpm install --global koa-router\n```\n\n## Usage\n\nRequire the router and mount the middleware:\n\n```javascript\nvar koa = require('koa')\n  , router = require('koa-router')\n  , app = koa();\n\napp.use(router(app));\n```\n\nAfter the router has been initialized, you can register routes or resources:\n\n```javascript\napp.get('/users/:id', function *(id) {\n  var user = yield User.findOne(id);\n  this.body = user;\n});\n\napp.resource('forums', require('./controllers/forums'));\n```\n\nYou can use multiple routers and sets of routes by omitting the `app`\nargument. For example, separate routers for two versions of an API:\n\n```javascript\nvar APIv1 = new Router();\nvar APIv2 = new Router();\n\nAPIv1.get('/sign-in', function *() {\n  // ...\n});\n\nAPIv2.get('/sign-in', function *() {\n  // ...\n});\n\napp.use(mount('/v1', APIv1.middleware()));\napp.use(mount('/v2', APIv2.middleware()));\n```\n\n### app.verb(path, callback, [callback...])\n\nMatch URL patterns to callback functions or controller actions using `app.verb()`,\nwhere **verb** is one of the HTTP verbs such as `app.get()` or `app.post()`.\n\n```javascript\napp.get('/', function *(next) {\n  this.body = 'Hello World!';\n});\n```\n\nRoute paths will be translated to regular expressions used to match requests.\nQuery strings will not be considered when matching requests.\n\nMultiple callbacks may be given, and each one will be called sequentially:\n\n```javascript\napp.get(\n  '/users/:id',\n  function *(id) {\n    user = yield User.findOne(id);\n    return [user];\n  }, function *(user) {\n    console.log(user);\n    // => { id: 17, name: \"Alex\" }\n  }\n);\n```\n\nYou can modify the route parameters for subsequent callbacks by returning an\narray of arguments to apply, as shown in the example above.\n\n#### Named parameters\n\nNamed route parameters are captured and passed as arguments to the route callback.\nThey are also available in the app context using `this.params`.\n\n```javascript\napp.get('/:category/:title', function *(category, title, next) {\n  console.log(this.params);\n  // => { category: 'programming', title: 'how-to-node' }\n});\n```\n\n#### Regular expressions\n\nControl route matching exactly by specifying a regular expression instead of\na path string when creating the route. For example, it might be useful to match\ndate formats for a blog, such as `/blog/2013-09-04`:\n\n```javascript\napp.get(/^\\/blog\\/\\d{4}-\\d{2}-\\d{2}\\/?$/i, function *(next) {\n  // ...\n});\n```\n\n#### Multiple methods\n\nYou can map routes to multiple HTTP methods using `app.map()`:\n\n```javascript\napp.map(['GET', 'POST'], '/', function *(next) {\n  // ...\n});\n```\n\nYou can map to all methods use `app.all()`:\n\n```javascript\napp.all('/', function *(next) {\n  // ...\n});\n```\n\n### app.resource(path, actions)\n\nResource routing is provided by the `app.resource()` method. `app.resource()`\nregisters routes for corresponding controller actions, and returns a\n`Resource` object that can be used to further nest resources.\n\n```javascript\nvar app    = require('koa')()\n  , router = require('koa-router')(app);\n\napp.use(router);\n\napp.resource('users', require('./user'));\n```\n\n#### Action mapping\n\nActions are then mapped accordingly:\n\n```javascript\nGET     /users             ->  index\nGET     /users/new         ->  new\nPOST    /users             ->  create\nGET     /users/:user       ->  show\nGET     /users/:user/edit  ->  edit\nPUT     /users/:user       ->  update\nDELETE  /users/:user       ->  destroy\n```\n\n#### Top-level resource\n\nOmit the resource name to specify a top-level resource:\n\n```javascript\napp.resource(require('./frontpage'));\n```\n\nTop-level controller actions are mapped as follows:\n\n```javascript\nGET     /          ->  index\nGET     /new       ->  new\nPOST    /          ->  create\nGET     /:id       ->  show\nGET     /:id/edit  ->  edit\nPUT     /:id       ->  update\nDELETE  /:id       ->  destroy\n```\n\n#### Auto-loading\n\nAutomatically load requested resources by specifying the `load` action\non your controller:\n\n```javascript\nvar actions = {\n  show: function *(user) {\n    this.body = user;\n  },\n  load: function *(id) {\n    return users[id];\n  }\n};\n\napp.resource('users', actions);\n```\n\nThe `user` object will then be available to the relevant controller actions.\nYou can also pass the load method as an option:\n\n```javascript\napp.resource('users', require('./users'), { load: User.findOne });\n```\n\n#### Nesting\n\nResources can be nested using `resource.add()`:\n\n```javascript\nvar forums = app.resource('forums', require('./forum'), { load: Forum.findOne });\nvar theads = app.resource('threads', require('./threads'), { load: Thread.findOne });\n\nforums.add(threads);\n```\n\n### app.redirect(path, destination, [code])\n\nRedirect `path` to `destination` URL with optional 30x status `code`.\n\n```javascript\napp.redirect('/login', 'sign-in');\n```\n\nThis is equivalent to:\n\n```javascript\napp.all('/login', function *() {\n  this.redirect('/sign-in');\n  this.status = 301;\n});\n```\n\n## Tests\n\nTests use [mocha](https://github.com/visionmedia/mocha) and can be run \nwith [npm](https://npmjs.org):\n\n```\nnpm test\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Alexander C. Mingoia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexmingoia/koa-router/issues"
  },
  "homepage": "https://github.com/alexmingoia/koa-router",
  "_id": "koa-router@1.6.1",
  "_from": "koa-router@>=1.1.4 <2.0.0"
}
