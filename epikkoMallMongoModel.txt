DB Design:

store : { 
  _id : storeid;
  name : Store1;
  creationtimestamp : dateandtime;
  description : storedescription,
  status : StoreStatusActive,
  storeaddress : {
    addressLine1 : street1;
    addressLine2 : street2;
    addressLine3 : street3;
    city : CityName,
    stateorprovince : StateName,
    country : countryname,
    postalcode : myzipcode
    },
  contact : {
    StoreEmail : contactemail;
    phone1: { phonename : phone/fax/..., phonenumber : 333-333-3333 },
    phone2: { phonename : phone/fax/..., phonenumber : 333-444-4444 },
    websitelink : www.mysite.com; 
    },
  Assets : {
    img_videos : [ 
      img_video: { 
        _id: Assetid,
        uri : imageurl1,
        name : storefacadeimage1;
        type : top_banner;  // logo, banner, map, footer
        created :  ISODate;
        author : "Mike Wallace", 
        caption : "My Store's Entrance";
        tags : [...],
        details { // this is the variant part
          resolution: aXb,  // that adjust to the type of dimensions: {},         // asset
          duration : 60 s
          },
      },
      ...
    ],
    otherassets
  },
HoursOfOperation : String
}

categories: { 
  name : categoryName,
  category_code : categoryName without spaces,
  parent_category : ParentCategoryid, // this value will be empty if category is parent  
                                        // catogery
}

products: {
  ID: myproductid1,
  name: productname;
  description: productdescription;
  subcategory_id : [productsubcategory_id]; // Will be FK of categories table
  deliveryspecs : "Next Day delivery";
  shippingspecs : "$4.50 Delivery charges";
  returnsspecs : "Item can be returned within 14 days from the date of purchase";
  variations :[{
    name:specification;
    SKU:SKUid;
    unitofmeasure:each/box/pack/dozen,...;
    Pricing:{
      regularPrice : Number,     
      offerPrice : Number,      
      offerPriceValidUpto : Date,   
      discountAmount : Number
      //We assume that only one offer can be there at a time
    },  
    Inventory:{
      quantityavailable:x;
      quantityreserve:y;
      alert:w;
      online:t/f;
      instore:t/f;
    },
    Assets : {
      img_videos : [ 
        { 
          _id: Assetid,
          uri : imageurl1,      // filename?
          name : SKU123456,
          type : small_product_picture;       
          created :  ISODate;
          author : "photolabs", 
          caption : "Green Hat Small Picture”,
          tags : [#small_picture, ...],
          details {         
            resolution: aXb,  
            dimensions: {},
            duration    
          }, 
        },
        ...
      ],  
    },
    details {
      brand : XYZ,
      manufacturer : ABC,
      dimensions {lenght : 1, width : 2,depth : 3},
      weight : 5 lbs,
      ...,
    },
    overallrating : 5;  // updated nightly from reviews collection    
  }
  overall_rating : 5, 
  number_of_ratings : 17,
  useful_reviews: [ most useful 5 product_reviews denormalized],
  recent_reviews: [ most recent 5 product_reviews denormalized]
}


product_reviews : {
  _id : mongo id for review,
  productid: id of product (FK),
  creationtimestamp: date_time iso
  score: 5,
  recommend: t/f,
  review_text: "the best thing ever ...",
  useful_votes: 12,
  creator_id: FK of user_id,
  creator_nickname: SecretAgent33,
  creator_email: SA33@gmail.com,
  creator_location : {city: abc, state : xyz, country : US}
}

roles{
  _id: monogo id,
  name: string,
  actions: [ strings ] like “user:save_item_as_favorite” “store:create_product” // each action is corresponding to a web api endpoint which is available in to this role.
}

apps{
  _id: monogo id,
  name: string,         // there are 3 apps i.e. admin site, public site, test app
  actions: [ strings ] like “user:save_item_as_favorite” “store:create_product” // each action is corresponding to a web api endpoint which can be used in an app
}

user_account : {
  _id: ObjectId
  username : myusername,        // this is same as nickname SecretAgent33
  primary_email: email,       //
  password : encryptedpassword,
  fullname: string,
  emails : [
    {
      email: string,
      verification code: string,      // used for verifying email of user, it is sent to this email id,
      isVerified: boolean       // is this email verified.
    }
  ],
  image: user image for profile,
  role: string,           // FK of Roles  
  …             // Rest of items need to be reviewed
}
